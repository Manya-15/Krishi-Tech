# -*- coding: utf-8 -*-
"""hackathon

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mJIf5pKgvpU8aMtRV_HoO28Dgi3ngFCN
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import lazypredict
import numpy as np

df = pd.read_csv('fertilizer.csv')
print(df.head())

from sklearn.preprocessing import LabelEncoder

labelencoder = LabelEncoder()

categorical_columns = ['Soil Type', 'Crop Type', 'Fertilizer Name']

# Apply LabelEncoder to each categorical column
for column in categorical_columns:
    df[column] = labelencoder.fit_transform(df[column])

print(df)

from lazypredict.Supervised import LazyClassifier

X = df[['Temparature', 'Moisture', 'Soil Type', 'Crop Type', 'Nitrogen', 'Potassium', 'Phosphorous']]
y = df['Fertilizer Name']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

clf = LazyClassifier(verbose=0,ignore_warnings=True, custom_metric=None)
models,predictions = clf.fit(X_train, X_test, y_train, y_test)

models

predictions

from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier

rf = RandomForestClassifier()
dt = DecisionTreeClassifier()


dt.fit(X_train,y_train)

rf.fit(X_train,y_train)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
predictions = rf.predict(X_test)
accuracy = accuracy_score(y_test, predictions)
print(predictions)
print(accuracy)

pred = dt.predict(X_test)
acc = accuracy_score(y_test, pred)
print(f'decision tree prediction: {pred}')
print(f'decision tree accuracy: {acc * 100:.2f}%')

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

rf_predictions = rf.predict(X_test)
rf_accuracy = accuracy_score(y_test, rf_predictions)
print(f'Random Forest Predictions: {rf_predictions}')
print(f'Random Forest Accuracy: {rf_accuracy * 100:.2f}%')

import pickle
with open('random_forest_model.pkl', 'wb') as file:
    pickle.dump(rf, file)

with open('decision_tree_model.pkl', 'wb') as file:
    pickle.dump(dt, file)

import joblib
joblib.dump(rf, 'random_forest_model.pkl')
joblib.dump(dt, 'decision_tree_model.pkl')